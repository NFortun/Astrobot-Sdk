// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetImagesParams creates a new GetImagesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetImagesParams() *GetImagesParams {
	return &GetImagesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetImagesParamsWithTimeout creates a new GetImagesParams object
// with the ability to set a timeout on a request.
func NewGetImagesParamsWithTimeout(timeout time.Duration) *GetImagesParams {
	return &GetImagesParams{
		timeout: timeout,
	}
}

// NewGetImagesParamsWithContext creates a new GetImagesParams object
// with the ability to set a context for a request.
func NewGetImagesParamsWithContext(ctx context.Context) *GetImagesParams {
	return &GetImagesParams{
		Context: ctx,
	}
}

// NewGetImagesParamsWithHTTPClient creates a new GetImagesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetImagesParamsWithHTTPClient(client *http.Client) *GetImagesParams {
	return &GetImagesParams{
		HTTPClient: client,
	}
}

/*
GetImagesParams contains all the parameters to send to the API endpoint

	for the get images operation.

	Typically these are written to a http.Request.
*/
type GetImagesParams struct {

	// EndDate.
	//
	// Format: date-time
	EndDate *strfmt.DateTime

	// Limit.
	Limit *int64

	// Offset.
	Offset *int64

	// StartDate.
	//
	// Format: date-time
	StartDate *strfmt.DateTime

	// User.
	User *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get images params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetImagesParams) WithDefaults() *GetImagesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get images params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetImagesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get images params
func (o *GetImagesParams) WithTimeout(timeout time.Duration) *GetImagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get images params
func (o *GetImagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get images params
func (o *GetImagesParams) WithContext(ctx context.Context) *GetImagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get images params
func (o *GetImagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get images params
func (o *GetImagesParams) WithHTTPClient(client *http.Client) *GetImagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get images params
func (o *GetImagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDate adds the endDate to the get images params
func (o *GetImagesParams) WithEndDate(endDate *strfmt.DateTime) *GetImagesParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get images params
func (o *GetImagesParams) SetEndDate(endDate *strfmt.DateTime) {
	o.EndDate = endDate
}

// WithLimit adds the limit to the get images params
func (o *GetImagesParams) WithLimit(limit *int64) *GetImagesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get images params
func (o *GetImagesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get images params
func (o *GetImagesParams) WithOffset(offset *int64) *GetImagesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get images params
func (o *GetImagesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithStartDate adds the startDate to the get images params
func (o *GetImagesParams) WithStartDate(startDate *strfmt.DateTime) *GetImagesParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get images params
func (o *GetImagesParams) SetStartDate(startDate *strfmt.DateTime) {
	o.StartDate = startDate
}

// WithUser adds the user to the get images params
func (o *GetImagesParams) WithUser(user *string) *GetImagesParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the get images params
func (o *GetImagesParams) SetUser(user *string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *GetImagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate strfmt.DateTime

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate.String()
		if qEndDate != "" {

			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate strfmt.DateTime

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {

			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}
	}

	if o.User != nil {

		// query param user
		var qrUser string

		if o.User != nil {
			qrUser = *o.User
		}
		qUser := qrUser
		if qUser != "" {

			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
